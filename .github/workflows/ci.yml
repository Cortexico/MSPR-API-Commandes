name: CI/CD Pipeline for FastAPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 20s  # Augmenté pour permettre plus de temps au conteneur de se stabiliser
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: postgresql+asyncpg://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}
      # Adaptez cette chaîne à vos besoins ou configurez-la pour qu'elle soit générée dynamiquement avec les bonnes variables.

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Set PYTHONPATH
      run: |
        echo "PYTHONPATH=${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE}/app" >> $GITHUB_ENV

    - name: Cache Python packages
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pytest tests/

    - name: Build Docker image
      run: |
        docker build -t myapi .


    # - name: Notify on Slack
    #   if: always()
    #   uses: rtCamp/action-slack-notify@v2
    #   env:
    #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    #     SLACK_CHANNEL: 'your-channel'
    #     SLACK_MESSAGE: 'Build ${{ job.status }}: ${{ github.repository }} @ ${{ github.ref }}'
    #   # Envoie une notification Slack à chaque exécution du workflow.
