name: CI/CD Pipeline for FastAPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    # Configuration des services nécessaires pour les tests
    services:
      postgres:
        image: postgres:13  # Utilisation de l'image Docker officielle PostgreSQL version 13
        env:
          POSTGRES_USER: orders  # Nom d'utilisateur pour la base de données
          POSTGRES_PASSWORD: apiOrders  # Mot de passe pour la base de données
          POSTGRES_DB: orders_db  # Nom de la base de données
        ports:
          - 5432:5432  # Exposition du port 5432 pour la connexion à la base de données
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
          - 5672:5672  # Port par défaut pour RabbitMQ
          - 15672:15672  # Port pour l'interface web de gestion

    # Étapes du job
    steps:
    - uses: actions/checkout@v2  # Cette étape permet de récupérer le code du dépôt GitHub

    - name: Set up Docker Compose
      run: docker-compose -f docker-compose.yml up -d  # Lance les services définis dans le fichier docker-compose.yml en mode détaché

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        docker-compose run api pip install -r requirements.txt

    - name: Run tests
      run: |
        docker-compose run api pytest tests/

    - name: Build Docker image
      run: |
        docker build -t myapi .

    - name: Clean up  # Nettoyage
      run: docker-compose down  # Arrête et supprime les conteneurs lancés par Docker Compose

