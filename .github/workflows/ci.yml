name: CI/CD Pipeline for FastAPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: orders
          POSTGRES_PASSWORD: apiOrders
          POSTGRES_DB: orders_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_USER: orders
      POSTGRES_PASSWORD: apiOrders
      POSTGRES_DB: orders_db
      POSTGRES_HOST: localhost
      POSTGRES_PORT: '5432'

      API_HOST: '0.0.0.0'
      API_PORT: '8002'

      RABBITMQ_HOST: localhost
      RABBITMQ_PORT: '5672'

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready"
              break
            else
              echo "Waiting for PostgreSQL..."
              sleep 1
            fi
          done

      - name: Wait for RabbitMQ to be ready
        run: |
          for i in {1..30}; do
            if rabbitmq-diagnostics -q ping; then
              echo "RabbitMQ is ready"
              break
            else
              echo "Waiting for RabbitMQ..."
              sleep 1
            fi
          done

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=${{ github.workspace }}:${{ github.workspace }}/app" >> $GITHUB_ENV

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/app
        run: |
          pytest tests/

      - name: Build Docker image
        run: |
          docker build -t myapi .
